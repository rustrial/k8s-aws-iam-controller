name: publish

on:
  release:
    types:
      - "created"
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  publish-oci-images:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract VERSION from GITHUB_REF
        run: TAG_NAME="${GITHUB_REF#refs/*/}"; echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v2
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      # Note, we switched from docker buildx to use buildah/podman for building and pushing
      # OCI images as multi-arch image building did no longer work with docker buildx due to
      # https://github.com/docker/build-push-action/issues/621.
      - name: Log in to Docker registry (docker.io)
        uses: redhat-actions/podman-login@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build OCI Image
        uses: redhat-actions/buildah-build@v2
        id: build-image
        with:
          image: rustrial/k8s-aws-iam-controller
          tags: ${{github.sha}} ${{env.VERSION}}
          platforms: linux/arm64,linux/amd64
          containerfiles: |
            ./Dockerfile
      - name: Push OCI Image to Docker registry (docker.io)
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
  test-chart:
    name: install-chart
    runs-on: ubuntu-latest
    needs:
      - publish-oci-images
    strategy:
      matrix:
        k8s: # Must be available from https://github.com/kubernetes-sigs/kind/releases
          - v1.23.17
          - v1.24.15
          - v1.25.11
          - v1.26.6
          - v1.27.3
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract VERSION from GITHUB_REF
        run: TAG_NAME="${GITHUB_REF#refs/*/}"; echo "VERSION=${TAG_NAME#v}" >> $GITHUB_ENV
      - name: Set up Helm
        uses: azure/setup-helm@v3.5
        with:
          version: "v3.12.1"
      - name: Run chart-testing (lint)
        run: (cd charts/k8s-aws-iam-controller && helm lint .)
      - name: Create kind ${{ matrix.k8s }} cluster
        uses: helm/kind-action@v1.7.0
        with:
          version: "v0.20.0" # https://github.com/kubernetes-sigs/kind/releases
          node_image: kindest/node:${{ matrix.k8s }}
          cluster_name: kind
      - name: Install chart
        # No --wait, we do not wait for the Deployment to become ready, as it will not become
        # ready without valid AWS credentials.
        run: (cd charts/k8s-aws-iam-controller && helm install k8s-aws-iam-controller . -n kube-system --create-namespace --set fullnameOverride=k8s-aws-iam-controller --set-string image.tag=${{env.VERSION}})
      - name: Tests
        run: ./.github/e2e-tests.sh
  create-release:
    name: Create Release
    needs:
      - publish-oci-images
      - test-chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "✏️ Generate release changelog"
        id: generate-release-changelog
        uses: heinrichreimer/github-changelog-generator-action@v2.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set TAG_NAME
        run: echo "TAG_NAME=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: "🚀 Create GitHub release"
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ steps.generate-release-changelog.outputs.changelog }}
          draft: false
          prerelease: false
  publish-chart:
    needs:
      - publish-oci-images
      - test-chart
      - create-release
    runs-on: ubuntu-latest
    env:
      CR_OWNER: rustrial
      CR_GIT_REPO: k8s-aws-iam-controller
      CR_PACKAGE_PATH: .cr-release-packages
      CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
      - name: Install Helm
        uses: azure/setup-helm@v3.5
        with:
          version: "v3.12.1"
      - name: Install CR
        run: .github/install-cr.sh
      - name: Update Helm Chart versions
        run: |
          export GIT_TAG="${GITHUB_REF##*/}"
          export VERSION="${GIT_TAG#v}"
          sed -i "s/version: 0.0.0/version: ${VERSION}/" charts/k8s-aws-iam-controller/Chart.yaml;
          sed -i "s/appVersion: 0.0.0/appVersion: ${VERSION}/" charts/k8s-aws-iam-controller/Chart.yaml;
      - name: Package Helm Charts
        run: /tmp/cr package charts/k8s-aws-iam-controller
      - name: Upload Helm Charts
        run: /tmp/cr upload -c $GITHUB_SHA
      - name: Update Helm Repository index
        run: /tmp/cr index -c https://rustrial.github.io/k8s-aws-iam-controller --push
